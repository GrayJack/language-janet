name: 'Janet'
scopeName: 'source.janet'
type: 'tree-sitter'
parser: 'tree-sitter-janet'

fileTypes: [
  'janet'
  'jpm'
]

comments:
  start: '# '

folds: [
  {
    start: {index: 0, type: '{'}
    end: {index: -1, type: '}'}
  }
  {
    start: {index: 0, type: '['}
    end: {index: -1, type: ']'}
  }
  {
    start: {index: 0, type: '('}
    end: {index: -1, type: ')'}
  }
]

scopes:
    'source_file': 'source.janet'

    'line_comment' : 'comment.line'

    '''
        fn > symbol,
        fn > scoped_symbol > symbol,
        extra_defs > symbol,
    ''' : 'entity.name.function.def'

    '''
        peg_set > "set",
        tuple > symbol:nth-child(1),
    ''' : [
        {match: '^\\$.*$', scopes: 'entity.name.variable.shortfnvar'},
        {match: '^(require|defglobal|varglobal)$' , scopes: 'keyword.control.other'},
        {match: '^(%|%=|\\*|\\*=|\\+|\\+\\+|\\+=|-|--|-=|->|->>|-\\?>|-\\?>>|\\/|\\/=|<|<=|=|>|>=)$', scopes: 'keyword.operator'},
        {match: '(->|->>|-\\?>|-\\?>>|and|as->|as-macro|as\\?->|case|chr|comment|compif|comptime|compwhen|cond|coro|default|defer|doc|each|eachk|eachp|edefer|ev\\/do-thread|ev\\/gather|ev\\/spawn|ev\\/with-deadline|for|forever|forv|generate|if-let|if-not|if-with|import|juxt|label|let|loop|match|or|prompt|protect|repeat|seq|tracev|try|unless|use|when|when-let|when-with|with|with-dyns|with-syms|with-vars)', scopes: 'entity.name.macro.call'},
        'entity.name.function.call'
    ]

    '''
        parameters > symbol,
        parameters > tuple > symbol,
        parameters > array > symbol,
        parameters > sqr_array > symbol,
        parameters > sqr_tuple > symbol,
        parameters > struct > symbol,
        parameters > table > symbol,
        tuple_parameters > symbol,
        tuple_parameters > tuple > symbol,
        tuple_parameters > array > symbol,
        tuple_parameters > sqr_array > symbol,
        tuple_parameters > sqr_tuple > symbol,
        tuple_parameters > struct > symbol,
        tuple_parameters > table > symbol,
    ''' : 'entity.name.variable.parameter'

    '''
        symbol,
    ''' : [
        {match: '^\\$.*$', scopes: 'entity.name.variable.shortfnvar'},
        {match: '^[A-Z\\d_]{2,}$', scopes: 'constant.other'},
    ]

    'keyword' : 'support.variable.contant.key'
    'mod_keyword' : 'support.variable.contant.modkey'

    '"def"' : 'storage.modifier.def'
    '"var"' : 'storage.modifier.var'
    'set > "set"' : 'storage.modifier.set'
    '"defn"' : 'storage.modifier.defn'
    '"defn-"' : 'storage.modifier.defn-'
    '"varfn"' : 'storage.modifier.varfn'
    '"varfn-"' : 'storage.modifier.varfn-'
    '"defmacro"' : 'storage.modifier.defmacro'
    '"defmacro-"' : 'storage.modifier.defmacro-'

    '"do"' : 'keyword.control.do'
    '"if"' : 'keyword.control.if'
    '"fn"' : 'keyword.control.fn'
    '"break"' : 'keyword.control.break'
    '"quote"' : 'keyword.control.quote'
    '"while"' : 'keyword.control.while'
    '"splice"' : 'keyword.control.splice'
    '"unquote"' : 'keyword.control.unquote'
    '"quasiquote"' : 'keyword.control.quasiquote'

    '"("': 'punctuation.definition.parameters.begin.bracket.round'
    '"@("': 'punctuation.definition.parameters.begin.bracket.round'
    '")"': 'punctuation.definition.parameters.end.bracket.round'
    '"{"': 'punctuation.definition.function.body.begin.bracket.curly'
    '"@{"': 'punctuation.definition.function.body.begin.bracket.curly'
    '"}"': 'punctuation.definition.function.body.end.bracket.curly'
    '"["': 'punctuation.definition.array.begin.bracket.square'
    '"@["': 'punctuation.definition.array.begin.bracket.square'
    '"]"': 'punctuation.definition.array.end.bracket.square'

    'short_quote > "\'"' : 'support.shorthand.quote'
    'short_splice > ";"' : 'support.shorthand.splice'
    'short_quasiquote > "~"' : 'support.shorthand.quasiquote'
    'short_unquote > ","' : 'support.shorthand.unquote'
    'short_fn > "|"' : 'support.shorthand.fn'
    'variadic_marker' : 'support.parameter.marker.variadic'
    'optional_marker' : 'support.parameter.marker.optional'
    'keys_marker' : 'support.parameter.marker.keys'

    '''
        str_literal,
        long_str_literal,
        buffer_literal,
        long_buffer_literal,
    ''' : 'string.quoted.double'

    'doc_str' : 'string.quoted.double.doc-str'

    'bool_literal' : 'constant.language.boolean'
    'number_literal': 'constant.number'
    'nil_literal' : 'constant.language.nil'
    # 'escape_sequence' : 'constant.character.escape'
