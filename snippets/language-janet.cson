'.source.janet':
  # Shebang
  'shebang':
    'prefix': 'shebang'
    'body': '#!/bin/env janet'

  # Library loading
  'import':
    'prefix': 'import'
    'body': '(import ${1:path} ${2:args})'

  'require':
    'prefix': 'req'
    'body': '(require ${1:path} ${2:args})'

  # Variable bindings
  'def':
    'prefix': 'def'
    'body': '(def ${1:symbol} ${2:value})'

  'def-':
    'prefix': 'def-'
    'body': '(def- ${1:symbol} ${2:value})'

  'defglobal':
    'prefix': 'defg'
    'body': '(defglobal ${1:symbol} ${2:value})'

  'var':
    'prefix': 'var'
    'body': '(var ${1:symbol} ${2:value})'

  'varglobal':
    'prefix': 'varg'
    'body': '(varglobal ${1:symbol} ${2:value})'

  'set':
    'prefix': 'set'
    'body': '(set ${1:var} ${2:value})'

  'let':
    'prefix': 'let'
    'body': """
      (let [${1:bindings}]
          ${2:body})
    """

  # Function bindings
  'defn':
    'prefix': 'defn'
    'body': """
      (defn ${1:name}
          [${2:params}]
          ${3:body})
    """

  'defn-':
    'prefix': 'defn-'
    'body': """
      (defn- ${1:name}
          [${2:params}]
          ${3:body})
    """

  'fn':
    'prefix': 'fn'
    'body': """
      (fn [${1:params}]
          ${2:body})$0
    """

  # Macro bindings
  'macro':
    'prefix': 'macro'
    'body': """
      (defmacro ${1:name}
          [${2:params}]
          ${3:more})
    """

  'macro-':
    'prefix': 'macro-'
    'body': """
      (defmacro- ${1:name}
          [${2:params}]
          ${3:more})
    """

  # Conditionals
  'if':
    'prefix': 'if'
    'body': """
      (if ${1:bool}
          ${2:then}
          ${3:else})
    """

  'if-let':
    'prefix': 'ifl'
    'body': """
      (if-let [${1:bindings}]
          ${2:then}
          ${3:else})
    """

  'if-not':
    'prefix': 'ifn'
    'body': """
      (if-not ${1:bool}
          ${2:then}
          ${3:else})
    """

  'when':
    'prefix': 'when'
    'body': """
      (when ${1:bool}
          ${2:body})
    """

  'when-let':
    'prefix': 'whenl'
    'body': """
      (when-let [${1:bindings}]
          ${2:body})
    """

  'when-not':
    'prefix': 'whenn'
    'body': """
      (when-not ${1:bool}
          ${2:body})
    """

  'unless':
    'prefix': 'unless'
    'body': """
      (unless ${1:bool}
          ${2:body})
    """

  'cond':
    'prefix': 'cond'
    'body': """
      (cond
          ${1:bool} ${2:expr}
          $0)
    """

  'case':
    'prefix': 'case'
    'body': """
      (case ${1:dispatch}
          ${2:bool} ${3:expr}
          $0)
    """

  'match':
    'prefix': 'match'
    'body': """
      (match ${1:x}
          ${2:cases}
          $0)
    """

  # Functional paradigm functions
  'filter':
    'prefix': 'filter'
    'body': '(filter ${1:bool} ${2:indexed})'

  'some':
    'prefix': 'some'
    'body': '(some ${1:bool} ${2:indexed})'

  'map':
    'prefix': 'map'
    'body': '(map ${1:function} ${2:indexed})'

  'reduce':
    'prefix': 'reduce'
    'body': '(reduce ${1:function} ${2:init} ${3:indexed})'

  'fold':
    'prefix': 'fold'
    'body': '(reduce ${1:function} ${2:init} ${3:indexed})'

  # Iterator and Imperative Loops
  'while':
    'prefix': 'while'
    'body': """
      (while ${1:bool}
          ${2:body})
    """

  'each':
    'prefix': 'each'
    'body': """
      (each ${1:bind} ${2:indexed}
          ${3:body})
    """

  'for':
    'prefix': 'for'
    'body': """
      (for [${1:binding}] ${2:start} ${3:end}
          ${4:body})
    """

  'loop':
    'prefix': 'loop'
    'body': """
      (loop [${1:head}]
          ${2:body})
    """

  'seq':
    'prefix': 'seq'
    'body': """
      (seq [${1:head}]
          ${2:body})
    """

  'generate':
    'prefix': 'gen'
    'body': """
      (generate [${1:head}]
          ${2:body})
    """

  'try':
    'prefix': 'try'
    'body': """
      (try
          $1
      ([${2:exception}]
          $3))
    """

  # File ops
  'slurp':
    'prefix': 'slurp'
    'body': '(slurp ${1:path})'

  # Data structure functions
  'length':
    'prefix': 'len'
    'body': '(length ${1:data_structure})'

  'put':
    'prefix': 'put'
    'body': '(put ${1:data_structure} ${2:key} ${3:value})'

  # Prints
  'print':
    'prefix': 'print'
    'body': '(print $1)'

  'pretty-print':
    'prefix': 'pp'
    'body': '(pp $1)'
